#!/usr/bin/env python3
import sys
from typing import List

def generate_tree(floors: int) -> str:
    "Создаёт текст ёлки с отступами, чтобы она выглядела симметрично."
    if floors < 1:
        raise ValueError("floors must be >= 1")

    lines: List[str] = []

    total = 2 * floors - 1  # количество рядов листвы
    max_stars = 4 * total - 3
    max_width = len(" ".join(["*"] * max_stars)) + 1  # +1 для визуального баланса

    # --- верхушка W (по центру) ---
    lines.append("W".center(max_width))

    # --- "листва" ---
    for k in range(1, total + 1):
        stars_count = 4 * k - 3
        stars = " ".join(["*"] * stars_count)

        if k == 1:
            row = stars
        elif k % 2 == 0:
            row = "@" + stars
        else:
            row = stars + "@"

        lines.append(row.center(max_width))

    # --- ствол ---
    trunk = "TTTTT"
    lines.append(trunk.center(max_width))
    lines.append(trunk.center(max_width))

    return "\n".join(lines) + "\n"


def main(argv=None):
    if argv is None:
        argv = sys.argv[1:]
    if len(argv) != 2:
        print("Использование: python tree.py <floors> <output_path>", file=sys.stderr)
        sys.exit(2)

    try:
        floors = int(argv[0])
    except ValueError:
        print("Ошибка: floors должно быть целым числом", file=sys.stderr)
        sys.exit(2)

    output_path = argv[1]
    tree_text = generate_tree(floors)

    with open(output_path, "w", encoding="utf-8") as f:
        f.write(tree_text)

    print(f"Ёлка с {floors} этажами записана в {output_path}")


if __name__ == "__main__":
    main()
